// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AlquilaFacilPlatform.Tests.CoreBehaviourDrivenDevelopment
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class NotificarSobreActividadesFeature : object, Xunit.IClassFixture<NotificarSobreActividadesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "US10NotificarSobreActividades.feature"
#line hidden
        
        public NotificarSobreActividadesFeature(NotificarSobreActividadesFeature.FixtureData fixtureData, AlquilaFacilPlatform_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CoreBehaviourDrivenDevelopment", "Notificar sobre actividades", "  Como arrendador,\r\n  Quiero recibir notificaciones cuando un arrendatario reserv" +
                    "e mi espacio,\r\n  Para estar informado sobre la fecha y hora del evento.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Notificación automática de nueva reserva")]
        [Xunit.TraitAttribute("FeatureTitle", "Notificar sobre actividades")]
        [Xunit.TraitAttribute("Description", "Notificación automática de nueva reserva")]
        [Xunit.InlineDataAttribute("Juan Pérez", "Sala de reuniones", "2023-10-01", "10:00", new string[0])]
        [Xunit.InlineDataAttribute("Ana Gómez", "Oficina privada", "2023-10-02", "14:00", new string[0])]
        public void NotificacionAutomaticaDeNuevaReserva(string arrendatario, string espacioReservado, string fecha, string hora, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("arrendatario", arrendatario);
            argumentsOfScenario.Add("espacio reservado", espacioReservado);
            argumentsOfScenario.Add("fecha", fecha);
            argumentsOfScenario.Add("hora", hora);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Notificación automática de nueva reserva", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
    testRunner.Given(string.Format("que un {0} ha realizado una reserva para un espacio", arrendatario), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
    testRunner.When("se completa el envío del comprobante de pago", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
    testRunner.Then(string.Format("el arrendador recibe una notificación que incluye la {0}, {1} y nombre del {2}", fecha, hora, espacioReservado), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Visualización en la sección de notificaciones")]
        [Xunit.TraitAttribute("FeatureTitle", "Notificar sobre actividades")]
        [Xunit.TraitAttribute("Description", "Visualización en la sección de notificaciones")]
        [Xunit.InlineDataAttribute("2023-10-01", "10:00", "Sala de reuniones", new string[0])]
        [Xunit.InlineDataAttribute("2023-10-02", "14:00", "Oficina privada", new string[0])]
        public void VisualizacionEnLaSeccionDeNotificaciones(string fecha, string hora, string reserva, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("fecha", fecha);
            argumentsOfScenario.Add("hora", hora);
            argumentsOfScenario.Add("reserva", reserva);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Visualización en la sección de notificaciones", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
    testRunner.Given("que el arrendador desea revisar sus notificaciones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
    testRunner.When("accede a la sección de notificaciones en la aplicación", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
    testRunner.Then(string.Format("puede ver un listado con los detalles de cada {0} reciente, incluyendo {1} y {2}", reserva, fecha, hora), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                NotificarSobreActividadesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                NotificarSobreActividadesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
