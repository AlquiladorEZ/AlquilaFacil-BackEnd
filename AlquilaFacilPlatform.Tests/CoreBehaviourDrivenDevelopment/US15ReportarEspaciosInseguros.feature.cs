// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AlquilaFacilPlatform.Tests.CoreBehaviourDrivenDevelopment
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ReportarEspaciosInsegurosFeature : object, Xunit.IClassFixture<ReportarEspaciosInsegurosFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "US15ReportarEspaciosInseguros.feature"
#line hidden
        
        public ReportarEspaciosInsegurosFeature(ReportarEspaciosInsegurosFeature.FixtureData fixtureData, AlquilaFacilPlatform_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CoreBehaviourDrivenDevelopment", "Reportar espacios inseguros", "  Como usuario de AlquilaFácil,\r\n  Quiero poder reportar espacios inseguros,\r\n  P" +
                    "ara contribuir a la seguridad de la comunidad y alertar sobre situaciones que pu" +
                    "edan poner en riesgo a otros usuarios.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Selección del espacio inseguro")]
        [Xunit.TraitAttribute("FeatureTitle", "Reportar espacios inseguros")]
        [Xunit.TraitAttribute("Description", "Selección del espacio inseguro")]
        [Xunit.InlineDataAttribute("Espacio A", "Problema de seguridad", "El espacio tiene una puerta rota", new string[0])]
        [Xunit.InlineDataAttribute("Espacio B", "Problema de limpieza", "El espacio está sucio y desordenado", new string[0])]
        public void SeleccionDelEspacioInseguro(string espacio, string asunto, string descripcion, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("espacio", espacio);
            argumentsOfScenario.Add("asunto", asunto);
            argumentsOfScenario.Add("descripción", descripcion);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selección del espacio inseguro", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
    testRunner.Given("que el usuario ha iniciado sesión en su cuenta de AlquilaFácil", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
    testRunner.When(string.Format("accede a la sección de \"Reportar espacio\" y selecciona el {0} desde la lista de r" +
                            "eservas activas o buscando un espacio específico", espacio), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
    testRunner.Then(string.Format("puede ingresar un {0} y {1} del problema", asunto, descripcion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Confirmación del reporte")]
        [Xunit.TraitAttribute("FeatureTitle", "Reportar espacios inseguros")]
        [Xunit.TraitAttribute("Description", "Confirmación del reporte")]
        [Xunit.InlineDataAttribute("Espacio A", "registrado", new string[0])]
        [Xunit.InlineDataAttribute("Espacio B", "registrado", new string[0])]
        public void ConfirmacionDelReporte(string reporte, string registrado, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("reporte", reporte);
            argumentsOfScenario.Add("registrado", registrado);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Confirmación del reporte", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
    testRunner.Given("que el usuario ha completado el formulario de reporte con todos los detalles requ" +
                        "eridos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
    testRunner.When("envía el reporte mediante el botón \"Enviar\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
    testRunner.Then(string.Format("el {0} será {1} y revisado por el equipo de soporte de AlquilaFácil", reporte, registrado), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ReportarEspaciosInsegurosFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ReportarEspaciosInsegurosFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
