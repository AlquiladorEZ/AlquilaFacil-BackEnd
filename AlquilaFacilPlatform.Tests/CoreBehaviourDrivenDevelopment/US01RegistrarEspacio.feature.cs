// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AlquilaFacilPlatform.Tests.CoreBehaviourDrivenDevelopment
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RegistrarUsuarioFeature : object, Xunit.IClassFixture<RegistrarUsuarioFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "US01RegistrarEspacio.feature"
#line hidden
        
        public RegistrarUsuarioFeature(RegistrarUsuarioFeature.FixtureData fixtureData, AlquilaFacilPlatform_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CoreBehaviourDrivenDevelopment", "Registrar usuario", "  Como usuario de la aplicación de AlquilaFácil\r\n  Quiero poder registrarme fácil" +
                    "mente en AlquilaFácil \r\n  Para ofrecer mi espacio en alquiler y llegar a más cli" +
                    "entes potenciales.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Validación de datos")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar usuario")]
        [Xunit.TraitAttribute("Description", "Validación de datos")]
        [Xunit.InlineDataAttribute("Username", "juanperez", new string[0])]
        [Xunit.InlineDataAttribute("Password", "Secreta!1234", new string[0])]
        [Xunit.InlineDataAttribute("Email", "juan@example.com", new string[0])]
        [Xunit.InlineDataAttribute("Name", "Juan Pérez", new string[0])]
        [Xunit.InlineDataAttribute("FatherName", "Carlos Pérez", new string[0])]
        [Xunit.InlineDataAttribute("MotherName", "Laura Pérez", new string[0])]
        [Xunit.InlineDataAttribute("DateOfBirth", "01-01-1990", new string[0])]
        [Xunit.InlineDataAttribute("DocumentNumber", "1234567890", new string[0])]
        [Xunit.InlineDataAttribute("Phone", "123456789", new string[0])]
        public void ValidacionDeDatos(string campo, string valor, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("campo", campo);
            argumentsOfScenario.Add("valor", valor);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validación de datos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "campo",
                            "valor"});
                table1.AddRow(new string[] {
                            string.Format("{0}", campo),
                            string.Format("{0}", valor)});
#line 8
    testRunner.Given("un usuario completa el formulario de registro en AlquilaFácil con los siguientes " +
                        "datos:", ((string)(null)), table1, "Given ");
#line hidden
#line 11
    testRunner.When("el usuario envía el formulario", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
    testRunner.Then("los datos proporcionados se validan para garantizar la precisión y la autenticida" +
                        "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Validación de CAPTCHA")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar usuario")]
        [Xunit.TraitAttribute("Description", "Validación de CAPTCHA")]
        [Xunit.InlineDataAttribute("Username", "juanperez", new string[0])]
        [Xunit.InlineDataAttribute("Password", "Secreta!1234", new string[0])]
        [Xunit.InlineDataAttribute("Email", "juan@example.com", new string[0])]
        [Xunit.InlineDataAttribute("Name", "Juan Pérez", new string[0])]
        [Xunit.InlineDataAttribute("FatherName", "Carlos Pérez", new string[0])]
        [Xunit.InlineDataAttribute("MotherName", "Laura Pérez", new string[0])]
        [Xunit.InlineDataAttribute("DateOfBirth", "1990-01-01", new string[0])]
        [Xunit.InlineDataAttribute("DocumentNumber", "1234567890", new string[0])]
        [Xunit.InlineDataAttribute("Phone", "123456789", new string[0])]
        public void ValidacionDeCAPTCHA(string campo, string valor, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("campo", campo);
            argumentsOfScenario.Add("valor", valor);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validación de CAPTCHA", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "campo",
                            "valor"});
                table2.AddRow(new string[] {
                            string.Format("{0}", campo),
                            string.Format("{0}", valor)});
#line 27
    testRunner.Given("un usuario ha completado el formulario de registro con los siguientes datos:", ((string)(null)), table2, "Given ");
#line hidden
#line 30
    testRunner.When("el usuario intenta enviarlo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
    testRunner.Then("el sistema solicita completar un CAPTCHA para verificar que no se trata de un bot" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Registro exitoso")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar usuario")]
        [Xunit.TraitAttribute("Description", "Registro exitoso")]
        [Xunit.InlineDataAttribute("Username", "juanperez", new string[0])]
        [Xunit.InlineDataAttribute("Password", "Secreta!1234", new string[0])]
        [Xunit.InlineDataAttribute("Email", "juan@example.com", new string[0])]
        [Xunit.InlineDataAttribute("Name", "Juan Pérez", new string[0])]
        [Xunit.InlineDataAttribute("FatherName", "Carlos Pérez", new string[0])]
        [Xunit.InlineDataAttribute("MotherName", "Laura Pérez", new string[0])]
        [Xunit.InlineDataAttribute("DateOfBirth", "1990-01-01", new string[0])]
        [Xunit.InlineDataAttribute("DocumentNumber", "1234567890", new string[0])]
        [Xunit.InlineDataAttribute("Phone", "123456789", new string[0])]
        public void RegistroExitoso(string campo, string valor, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("campo", campo);
            argumentsOfScenario.Add("valor", valor);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Registro exitoso", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "campo",
                            "valor"});
                table3.AddRow(new string[] {
                            string.Format("{0}", campo),
                            string.Format("{0}", valor)});
#line 46
    testRunner.Given("un usuario ha completado correctamente el formulario y superado la validación de " +
                        "CAPTCHA con los siguientes datos:", ((string)(null)), table3, "Given ");
#line hidden
#line 49
    testRunner.When("el usuario envía el formulario con toda la información válida", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
    testRunner.Then("el usuario recibe una confirmación de registro y puede acceder a su cuenta", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RegistrarUsuarioFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RegistrarUsuarioFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
