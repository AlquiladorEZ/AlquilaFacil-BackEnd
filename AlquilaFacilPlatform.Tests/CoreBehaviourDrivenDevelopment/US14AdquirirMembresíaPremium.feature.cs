// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AlquilaFacilPlatform.Tests.CoreBehaviourDrivenDevelopment
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AdquirirMembresiaPremiumFeature : object, Xunit.IClassFixture<AdquirirMembresiaPremiumFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "US14AdquirirMembresíaPremium.feature"
#line hidden
        
        public AdquirirMembresiaPremiumFeature(AdquirirMembresiaPremiumFeature.FixtureData fixtureData, AlquilaFacilPlatform_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CoreBehaviourDrivenDevelopment", "Adquirir membresía premium", "  Como usuario de AlquilaFácil,\r\n  Quiero poder adquirir una membresía mensual pr" +
                    "emium\r\n  Para acceder a beneficios exclusivos y maximizar mis oportunidades dent" +
                    "ro del aplicativo.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Selección de la membresía premium")]
        [Xunit.TraitAttribute("FeatureTitle", "Adquirir membresía premium")]
        [Xunit.TraitAttribute("Description", "Selección de la membresía premium")]
        [Xunit.InlineDataAttribute("Membresía Premium Mensual", "20.00", "Cuenta 1234567890", new string[0])]
        [Xunit.InlineDataAttribute("Membresía Premium Anual", "200.00", "Cuenta 9876543210", new string[0])]
        public void SeleccionDeLaMembresiaPremium(string descripcion, string costo, string informacionBancaria, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("descripción", descripcion);
            argumentsOfScenario.Add("costo", costo);
            argumentsOfScenario.Add("información bancaria", informacionBancaria);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selección de la membresía premium", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
    testRunner.Given("que el usuario ha iniciado sesión en su cuenta de AlquilaFácil", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
    testRunner.When("accede a la sección de \"Membresías\" y selecciona la opción de \"Membresía Premium\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
    testRunner.Then(string.Format("se le muestra una {0} detallada de los beneficios y el {1} de la membresía, junto" +
                            " con la {2} necesaria para realizar el depósito", descripcion, costo, informacionBancaria), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Envío de comprobante de pago")]
        [Xunit.TraitAttribute("FeatureTitle", "Adquirir membresía premium")]
        [Xunit.TraitAttribute("Description", "Envío de comprobante de pago")]
        [Xunit.InlineDataAttribute("20.00", "imagen_comprobante_mensual", new string[0])]
        [Xunit.InlineDataAttribute("200.00", "imagen_comprobante_anual", new string[0])]
        public void EnvioDeComprobanteDePago(string deposito, string comprobanteDePago, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("depósito", deposito);
            argumentsOfScenario.Add("comprobante de pago", comprobanteDePago);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Envío de comprobante de pago", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
    testRunner.Given("que el usuario desea adquirir la membresía mensual premium", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
    testRunner.When(string.Format("realiza el {0} y carga la imagen del {1}", deposito, comprobanteDePago), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
    testRunner.Then("se registra su solicitud de membresía en espera de verificación", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Validación del comprobante")]
        [Xunit.TraitAttribute("FeatureTitle", "Adquirir membresía premium")]
        [Xunit.TraitAttribute("Description", "Validación del comprobante")]
        [Xunit.InlineDataAttribute("20.00", "20.00", "aprobada", new string[0])]
        [Xunit.InlineDataAttribute("200.00", "200.00", "aprobada", new string[0])]
        [Xunit.InlineDataAttribute("20.00", "15.00", "rechazada", new string[0])]
        [Xunit.InlineDataAttribute("200.00", "150.00", "rechazada", new string[0])]
        public void ValidacionDelComprobante(string deposito, string montoCorrespondiente, string solicitud, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("depósito", deposito);
            argumentsOfScenario.Add("monto correspondiente", montoCorrespondiente);
            argumentsOfScenario.Add("solicitud", solicitud);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validación del comprobante", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
    testRunner.Given("que el usuario ha enviado el comprobante de pago", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
    testRunner.When(string.Format("el administrador revisa que el {0} coincide con el {1}", deposito, montoCorrespondiente), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
    testRunner.Then(string.Format("aprueba la solicitud, y el usuario recibe acceso a los beneficios premium; de lo " +
                            "contrario, la {0} es rechazada", solicitud), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AdquirirMembresiaPremiumFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AdquirirMembresiaPremiumFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
