// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AlquilaFacilPlatform.Tests.CoreBehaviourDrivenDevelopment
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RegistrarEspacioFeature : object, Xunit.IClassFixture<RegistrarEspacioFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "US03RegistrarEspacio.feature"
#line hidden
        
        public RegistrarEspacioFeature(RegistrarEspacioFeature.FixtureData fixtureData, AlquilaFacilPlatform_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CoreBehaviourDrivenDevelopment", "Registrar espacio", "  Como arrendador de un espacio para eventos en AlquilaFácil\r\n  Quiero poder regi" +
                    "strar mi espacio\r\n  Para comenzar a recibir solicitudes de reserva lo antes posi" +
                    "ble.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Registro paso a paso del espacio")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar espacio")]
        [Xunit.TraitAttribute("Description", "Registro paso a paso del espacio")]
        [Xunit.InlineDataAttribute("Distrito", "Ingresar el nombre del distrito", new string[0])]
        [Xunit.InlineDataAttribute("Calle", "Ingresar el nombre de la calle", new string[0])]
        [Xunit.InlineDataAttribute("Tipo de Local", "Seleccionar el tipo de local", new string[0])]
        [Xunit.InlineDataAttribute("País", "Ingresar el país del espacio", new string[0])]
        [Xunit.InlineDataAttribute("Ciudad", "Ingresar la ciudad del espacio", new string[0])]
        [Xunit.InlineDataAttribute("Precio", "Ingresar el precio del espacio", new string[0])]
        [Xunit.InlineDataAttribute("Foto", "Subir la URL de una foto del espacio", new string[0])]
        [Xunit.InlineDataAttribute("Descripción", "Escribir una descripción del espacio", new string[0])]
        [Xunit.InlineDataAttribute("Categoría", "Seleccionar la categoría del espacio", new string[0])]
        [Xunit.InlineDataAttribute("Características", "Detallar las características del espacio", new string[0])]
        [Xunit.InlineDataAttribute("Capacidad", "Ingresar la capacidad del local", new string[0])]
        public void RegistroPasoAPasoDelEspacio(string campo, string datosRequeridos, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("campo", campo);
            argumentsOfScenario.Add("datos requeridos", datosRequeridos);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Registro paso a paso del espacio", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
    testRunner.Given("un arrendador desea registrar su espacio en AlquilaFácil", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
    testRunner.When(string.Format("ingresa los {0} en cada {1} del formulario", datosRequeridos, campo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
    testRunner.Then("puede avanzar progresivamente hasta el resumen final del registro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Validación final de los datos requeridos")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar espacio")]
        [Xunit.TraitAttribute("Description", "Validación final de los datos requeridos")]
        [Xunit.InlineDataAttribute("Distrito", "Distrito Norte", new string[0])]
        [Xunit.InlineDataAttribute("Calle", "Calle Ficticia 123", new string[0])]
        [Xunit.InlineDataAttribute("Tipo de Local", "Oficina", new string[0])]
        [Xunit.InlineDataAttribute("País", "Perú", new string[0])]
        [Xunit.InlineDataAttribute("Ciudad", "Lima", new string[0])]
        [Xunit.InlineDataAttribute("Precio", "1500", new string[0])]
        [Xunit.InlineDataAttribute("Foto", "www.imagen1.jpg", new string[0])]
        [Xunit.InlineDataAttribute("Descripción", "Espacio luminoso y cómodo", new string[0])]
        [Xunit.InlineDataAttribute("Categoría", "Oficina", new string[0])]
        [Xunit.InlineDataAttribute("Características", "Wi-Fi, Aire acondicionado", new string[0])]
        [Xunit.InlineDataAttribute("Capacidad", "4", new string[0])]
        public void ValidacionFinalDeLosDatosRequeridos(string campos, string datos, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("campos", campos);
            argumentsOfScenario.Add("datos", datos);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validación final de los datos requeridos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 27
    testRunner.Given("un arrendador ha completado todos los pasos del registro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 28
    testRunner.When(string.Format("intenta enviar la solicitud de publicación del espacio con los siguientes {0}", datos), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
    testRunner.Then("el sistema valida que toda la información requerida esté completa", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
    testRunner.And(string.Format("si hay {0} faltantes o incorrectos, se muestra un mensaje de error indicando qué " +
                            "se debe corregir", campos), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Espacio publicado correctamente")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar espacio")]
        [Xunit.TraitAttribute("Description", "Espacio publicado correctamente")]
        [Xunit.InlineDataAttribute("Distrito", "Distrito Norte", new string[0])]
        [Xunit.InlineDataAttribute("Calle", "Calle Ficticia 123", new string[0])]
        [Xunit.InlineDataAttribute("Tipo de Local", "Oficina", new string[0])]
        [Xunit.InlineDataAttribute("País", "Perú", new string[0])]
        [Xunit.InlineDataAttribute("Ciudad", "Lima", new string[0])]
        [Xunit.InlineDataAttribute("Precio", "1500", new string[0])]
        [Xunit.InlineDataAttribute("Foto", "www.imagen1.jpg", new string[0])]
        [Xunit.InlineDataAttribute("Descripción", "Espacio luminoso y cómodo", new string[0])]
        [Xunit.InlineDataAttribute("Categoría", "Oficina", new string[0])]
        [Xunit.InlineDataAttribute("Características", "Wi-Fi, Aire acondicionado", new string[0])]
        [Xunit.InlineDataAttribute("Capacidad", "4", new string[0])]
        public void EspacioPublicadoCorrectamente(string registro, string datos, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("registro", registro);
            argumentsOfScenario.Add("datos", datos);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Espacio publicado correctamente", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 47
    testRunner.Given(string.Format("un arrendador ha completado correctamente el {0} con los siguientes {1}", registro, datos), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 48
    testRunner.When("el arrendador envía la solicitud de publicación", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
    testRunner.Then("el espacio se publica correctamente en la plataforma", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RegistrarEspacioFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RegistrarEspacioFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
