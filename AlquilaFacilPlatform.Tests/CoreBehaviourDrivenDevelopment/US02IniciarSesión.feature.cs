// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AlquilaFacilPlatform.Tests.CoreBehaviourDrivenDevelopment
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class IniciarSesionFeature : object, Xunit.IClassFixture<IniciarSesionFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "US02IniciarSesión.feature"
#line hidden
        
        public IniciarSesionFeature(IniciarSesionFeature.FixtureData fixtureData, AlquilaFacilPlatform_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CoreBehaviourDrivenDevelopment", "Iniciar sesión", "  Como usuario registrado de la aplicación de AlquilaFácil,\r\n  Quiero poder inici" +
                    "ar sesión fácilmente en mi cuenta, \r\n  Para gestionar mi espacio en alquiler y a" +
                    "cceder a mis reservas.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Inicio de sesión exitoso")]
        [Xunit.TraitAttribute("FeatureTitle", "Iniciar sesión")]
        [Xunit.TraitAttribute("Description", "Inicio de sesión exitoso")]
        [Xunit.InlineDataAttribute("juan@example.com", "Secreta!1234", new string[0])]
        [Xunit.InlineDataAttribute("maria@example.com", "Password123", new string[0])]
        public void InicioDeSesionExitoso(string correoElectronico, string contrasena, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("correo electrónico", correoElectronico);
            argumentsOfScenario.Add("contraseña", contrasena);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Inicio de sesión exitoso", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
    testRunner.Given("un usuario registrado desea acceder a su cuenta en AlquilaFácil", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
    testRunner.When(string.Format("el usuario ingresa su {0} y {1} correctos en el formulario de inicio de sesión", correoElectronico, contrasena), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
    testRunner.Then("el usuario es autenticado exitosamente y se le otorga acceso a su cuenta", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Error en el inicio de sesión por credenciales incorrectas")]
        [Xunit.TraitAttribute("FeatureTitle", "Iniciar sesión")]
        [Xunit.TraitAttribute("Description", "Error en el inicio de sesión por credenciales incorrectas")]
        [Xunit.InlineDataAttribute("juan@example.com", "Incorrecta", new string[0])]
        [Xunit.InlineDataAttribute("maria@example.com", "WrongPass", new string[0])]
        public void ErrorEnElInicioDeSesionPorCredencialesIncorrectas(string correoElectronico, string contrasena, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("correo electrónico", correoElectronico);
            argumentsOfScenario.Add("contraseña", contrasena);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error en el inicio de sesión por credenciales incorrectas", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
    testRunner.Given("un usuario registrado intenta acceder a su cuenta", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
    testRunner.When(string.Format("el usuario ingresa una combinación incorrecta de {0} y {1}", correoElectronico, contrasena), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
    testRunner.Then("se muestra un <mensaje de error> indicando que las credenciales son incorrectas", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                IniciarSesionFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                IniciarSesionFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
