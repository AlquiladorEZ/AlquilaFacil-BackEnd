// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AlquilaFacilPlatform.Tests.CoreBehaviourDrivenDevelopment
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ReservarEspaciosFeature : object, Xunit.IClassFixture<ReservarEspaciosFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "US07ReservarEspacios.feature"
#line hidden
        
        public ReservarEspaciosFeature(ReservarEspaciosFeature.FixtureData fixtureData, AlquilaFacilPlatform_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CoreBehaviourDrivenDevelopment", "Reservar espacios", "  Como arrendatario,\r\n  Quiero poder reservar un espacio para mi evento en Alquil" +
                    "aFácil\r\n  Para garantizar su disponibilidad en la fecha deseada.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Selección de espacio y fecha")]
        [Xunit.TraitAttribute("FeatureTitle", "Reservar espacios")]
        [Xunit.TraitAttribute("Description", "Selección de espacio y fecha")]
        [Xunit.InlineDataAttribute("Sala A", "2023-10-01 01:00:00  -  2023-10-01 02:00:00", "100.00", "123456789", "987654321", new string[0])]
        [Xunit.InlineDataAttribute("Sala B", "2023-10-02 01:00:00  -  2023-10-02 03:00:00", "150.00", "123456789", "987654321", new string[0])]
        public void SeleccionDeEspacioYFecha(string espacio, string fecha, string precio, string bancaria, string interbancaria, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("espacio", espacio);
            argumentsOfScenario.Add("fecha", fecha);
            argumentsOfScenario.Add("precio", precio);
            argumentsOfScenario.Add("bancaria", bancaria);
            argumentsOfScenario.Add("interbancaria", interbancaria);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selección de espacio y fecha", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
    testRunner.Given("que un arrendatario desea reservar un espacio", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
    testRunner.When(string.Format("selecciona el {0} deseado y la {1} del evento", espacio, fecha), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
    testRunner.Then(string.Format("se muestra el {0} total a pagar junto con los datos de la cuenta {1} e {2} del ar" +
                            "rendador", precio, bancaria, interbancaria), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Envío del comprobante de pago")]
        [Xunit.TraitAttribute("FeatureTitle", "Reservar espacios")]
        [Xunit.TraitAttribute("Description", "Envío del comprobante de pago")]
        [Xunit.InlineDataAttribute("voucher1.jpg", "Fecha inicio = 2023-10-01 01:00:00  -  Fecha fin =  2023-10-01 02:00:00", new string[0])]
        [Xunit.InlineDataAttribute("voucher2.jpg", "Fecha inicio = 2023-10-02 01:00:00  -  Fecha fin =  2023-10-02 03:00:00", new string[0])]
        public void EnvioDelComprobanteDePago(string voucher, string datosSolicitados, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("voucher", voucher);
            argumentsOfScenario.Add("datos solicitados", datosSolicitados);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Envío del comprobante de pago", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
    testRunner.Given("que el arrendatario ha realizado el pago externo mediante transferencia", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
    testRunner.When(string.Format("carga una foto del {0} de pago y completa los {1}", voucher, datosSolicitados), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
    testRunner.Then("el sistema registra la reserva como pendiente de validación", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Validación del pago por parte del arrendador")]
        [Xunit.TraitAttribute("FeatureTitle", "Reservar espacios")]
        [Xunit.TraitAttribute("Description", "Validación del pago por parte del arrendador")]
        [Xunit.InlineDataAttribute("voucher1.jpg", "No realizar ninguna acción para aceptar", new string[0])]
        [Xunit.InlineDataAttribute("voucher2.jpg", "Rechazar", new string[0])]
        public void ValidacionDelPagoPorParteDelArrendador(string voucher, string reserva, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("voucher", voucher);
            argumentsOfScenario.Add("reserva", reserva);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validación del pago por parte del arrendador", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
    testRunner.Given("que se ha creado una nueva reserva con comprobante adjunto", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
    testRunner.When(string.Format("el arrendador revisa el {0} y verifica que el monto es correcto", voucher), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
    testRunner.Then(string.Format("el arrendador puede aceptar la {0}, o en caso contrario, rechazarla", reserva), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ReservarEspaciosFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ReservarEspaciosFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
